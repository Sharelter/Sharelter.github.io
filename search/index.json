[{"content":"前天因为在疲惫的情况下操作很多东西， 一不小心把要dd进USB的ArchLinux LiveCD给dd到了系统盘里面。。。 命令执行的时候速度达到了1.8GB/s， 我看了一眼dd的of参数，心中一阵凉意\n我的记忆就这样被清除了吗。。。。\n好在我还有备份， 不至于太糟， 只不过需要耗费时间来reinstall了\n我尝试把作业系统完全还原到之前的状态，花费时间3hour\n但是装回来之后， 我感到这个UI过于熟悉， 动起了翻新系统的念头\n因为不久之前我在折腾飞腾的时候配置了Fedora， 配好之后还蛮好看的。。\n真的心动了。。。\n于是就真的开始动手了。。\n把刚装好的Arch又完全抹掉，一手拿着Installation Guide 操作Livecd, 从头开始安装了一遍Arch, 花费时间2hour\n~~ 才不会因为忘记安装的时候忘记安装链接Internet的包而需要重新进入Livecd装包呢 ~~\n~~ 才不会因为贪心有线网络的一点加速而耗费更多时间来让有线链接正常工作呢 ~~\n这样操作一次真的耗时好多的。。。 不知道我在玩Rock5B的时候怎么会又耐心来来回回这样操作几十次的。。\n在另一台设备上面打开General Recommendations， 给黑漆漆的TTY注入灵魂\nBtrfs子卷规划 要构建一个可以持久使用的作业系统的话， 需要有一个良好布局的文件系统来承载它\nsnapper推荐的文件系统布局如下\n1 2 3 4 5 6 7 8 9 10 11 12 subvolid=5 | ├── @ -| | contained directories: | ├── /usr | ├── /bin | ├── /.snapshots | ├── ... | ├── @home ├── @snapshots ├── @var_log @是根目录的子卷 @home是家目录的子卷， @var_log挂载在/var/log\n@snapshot是专用于快照的子卷， 挂载在/.snapshot\n上面所有的子卷前面都有一个@符号表示这些子卷都直属于subvolid=5的顶层子卷\nSnapper 1 # pacman -S snapper snapper是一个辅助管理btrfs子卷的工具\n可以自动化地定期对配置的子卷进行快照， 而且还可以清除过时的子卷\n如果要把某个子卷交给snapper进行快照，可以像下面这样写：\n1 2 # snapper -c root create-config / # snapper -c home create-config /home 子卷的路径写子卷的挂载点就好\n我一开始操作的时候还以为要把子卷的顶层目录挂载上， 使用由顶层子卷索引的目录才可以让snapper进行快照操作\n默认情况下， snapper将会在根目录子卷下面创建一个/.snapshot的子卷来存放所有快照\n这个子卷的路径如下图所示\n1 2 3 4 5 6 7 subvolid=5 | | ---- @ # 挂载在/ | | .snapshots # 挂载在/.snapshots 这样存放快照有一个弊端， 如果后续需要回滚的话， 回滚之后会丢失掉所有的快照\n要解决这个问题的话 可以为创建快照单独创建一个直属于顶层子卷的子卷@snapshot\n在一个正在运行的作业系统上面创建一个子卷的话， 可以先把顶层子卷找一个地方挂载上去再创建子卷\n1 2 3 # mkdir /btrfs # btrfs subvolume create /@snapshot # mount -o subvol=@snapshot /dev/nvme1n1p2 /.snapshots 通过定时器来实现自动化操作 snapper可以通过cron或者systemd timer来定时触发快照 但是如果同时启用了cron和systemd timer的定时服务， 那么会重复创建两次快照\n我用了systemd timer来触发， 同时为了避免后面装了cron的实现之后出锅 把snapper使用cron的定时文件删除掉\n在/etc/pacman.conf里面添加一下内容：\n1 NoExtract = etc/cron.daily/snapper etc/cron.hourly/snapper snap-pac 1 # pacman -S snap-pac snap-pac实现了通过pacman包管理器的hook函数来进行系统更新前后的自动化快照\n它的配置文件在/etc/snap-pac.ini 是一份注释良好的文件\n里面所有的内容初始状态下都是被注释的 如果没有任何有效的配置内容， snap-pac将以默认配置运行\n默认状况下 这个小工具将会对snapper的root配置进行snapshot\n如果你的snapper里面有这个名为root的配置的话 不需要任何其他配置，snap-pac就可以正常工作了\n配置文件里面详细写了每个参数的作用和它的默认值， 如果想要设定的值和默认值一样， 这项配置留空就可以\n下面放一下我的/etc/snap-pac.ini文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 # snap-pac example configuration file # see snap-pac(8) for more details # Each section corresponds with a snapper configuration. Add additional sections to add # other configurations to be snapshotted. By default, only the root configuration is snapshotted. # Create a section named [DEFAULT] to have a setting apply for all snapper configurations ## Uncomment to set parameters for snapper configuration named root [root] ## How many characters to limit the description for snapper. ## Default is 72 desc_limit = 72 ## Whether or not to take snapshots of this snapper configuration ## Default is True for root configuration and False for all other configurations snapshot = True ## What snapper cleanup algorithm to use ## Default is number cleanup_algorithm = number ## Pre snapshot description. ## Default is the pacman command that triggered the hook #pre_description = pacman pre snapshot ## Post snapshot description. ## Default is the list of packages involved in the pacman transaction #post_description = pacman post snapshot ## Uncomment to add \u0026#34;important=yes\u0026#34; to userdata for snapshots referring to these packages ## Default is [] important_packages = [\u0026#34;linux\u0026#34;] ## Uncomment to add \u0026#34;important=yes\u0026#34; to userdata for snapshots that were created with the following commands ## Default is [] important_commands = [\u0026#34;pacman -Syu\u0026#34;] ## Add custom userdata. Each key-value pair should be an item in the list ## Default is [] #userdata = [\u0026#34;key=value\u0026#34;,\u0026#34;foo=bar\u0026#34;] ## Example for another snapper configuration named \u0026#34;home\u0026#34; # [home] ## Default is False # snapshot = True 配置好之后， 每次使用pacman进行包的操作， snapper都会对设定的子卷进行快照\n","date":"2023-04-05T16:23:08+08:00","permalink":"https://sharelter.github.io/p/snapper/","title":"用Snapper自动管理btrfs快照"},{"content":"尝试用qemu/kvm装一台Ubuntu 22.04来跑一点服务， 通过这个配置了virt-manager的qemu-user-session\n(反复reboot了几次才成功跑起来，都是因为我没有把manual看全就急着up and running)\n这个virtualhost是要对外提供服务的嘛，因为qemu的user-network是通过NAT的，这里就需要一点端口转发的魔法\n开始的思路是用macvtap或者bridged的network 但是我的nic是一块intel AX211 wirelesscard, 而macvtap和bridge这种bridged的网络模式都不太支援无线网路\n创建bridge的话还要干掉主机的network-manager\n那么就另寻出路吧。。\n询问了一下@ziyao姐姐， 得到道具hostfwd\n去DuckDuckGo Search了一下qemu hostfwd找到了这个 这个post有166k的访问量诶， 可见这个需求是十分常见的\n但是这个使用qemu的cli来运行的virtualhost, virt-manager是用XML格式的配置文件来管理每个virtualmachine的config的\n继续Searchhow to port forward ssh in virt manager，在StackOverFlow上面找到了这个 嗯， 就是我想要的东西\n又是因为太着急了， 没有看全manual就去操作，导致浪费了一些时间来找virt-manager的config文件在什么地方\n翻了几篇post，得知要用virsh edit来编辑，这时候回来再看这个指南， 发现怎样编辑virtualhost的配置已经在第一行写明了呜呜呜\n1 virsh -c qemu:///session edit ubuntu18.04 这就是stackoverflow那篇post上面给出的编辑virtualhost配置的方法\nubuntu18.04是创建的virtualhost的名字\n接下来先把原有的nic的长得像下面这样子的配置去掉\n1 2 3 4 5 \u0026lt;interface type=\u0026#39;user\u0026#39;\u0026gt; \u0026lt;mac address=\u0026#39;52:54:00:52:35:ff\u0026#39;/\u0026gt; \u0026lt;model type=\u0026#39;rtl8139\u0026#39;/\u0026gt; \u0026lt;address type=\u0026#39;pci\u0026#39; domain=\u0026#39;0x0000\u0026#39; bus=\u0026#39;0x00\u0026#39; slot=\u0026#39;0x03\u0026#39; function=\u0026#39;0x0\u0026#39;/\u0026gt; \u0026lt;/interface\u0026gt; 在xml的根节点里加上qemu的命名空间:\n配置文件里面原本是这样子的\n1 \u0026lt;domain type=\u0026#39;kvm\u0026#39;\u0026gt; 插入之后是酱紫\n1 \u0026lt;domain type=\u0026#39;kvm\u0026#39; xmlns:qemu=\u0026#39;http://libvirt.org/schemas/domain/qemu/1.0\u0026#39;\u0026gt; 把这段插入到domain的根节点之间：\n1 2 3 4 5 6 \u0026lt;qemu:commandline\u0026gt; \u0026lt;qemu:arg value=\u0026#39;-netdev\u0026#39;/\u0026gt; \u0026lt;qemu:arg value=\u0026#39;user,id=ubuntu-net,net=10.0.10.0/24,dhcpstart=10.0.10.10,hostfwd=tcp::10080-:80,hostfwd=tcp::10443-:443,hostfwd=tcp::22222-:22\u0026#39;/\u0026gt; \u0026lt;qemu:arg value=\u0026#39;-device\u0026#39;/\u0026gt; \u0026lt;qemu:arg value=\u0026#39;virtio-net,netdev=ubuntu-net,addr=0x10\u0026#39;/\u0026gt; \u0026lt;/qemu:commandline\u0026gt; -netdev定义了一个qemu虚拟网络, 然后再通过-device参数， 定义一个虚拟网卡接入到刚才定义的网络当中去\n保存退出， 运行一下这个虚拟机\n发现新添加的nic的pcie address和已有的虚拟vga设备冲突了\n原来是没有指定在pcie总线上面的地址，因为这个nic是通过命名行参数添加的 自动分配到第一个pcie地址上面去了\n而第一个地址又被xml里面定义的其他设备使用了\n所以用addr=分配一个没有被使用的地址就可以了！\n改好之后果然就可以fireup and running了， 但是ip link发现虚拟网卡是LINK DOWN的状态\n再去StackOverFlow搜索一下，sudo dhclient $netdevice\n网络就可以用了\n想用network-manager来配置， 但是发现ubuntu server默认不是用的NM,而是netplan\n编辑/etc/netplan/00-installer-config.yaml:\n把网络设备名字改成当前的问题就解决了\n","date":"2023-03-30T12:20:52+08:00","permalink":"https://sharelter.github.io/p/qemu-hostfwd-config/","title":"用Virt-Mnanger来配置qemu hostfwd端口转发"},{"content":"本文记录了 ROCK5B (RK3588) 的开箱记录，以及遇到的问题及解决方法\n烧录系统到SD卡并启动 按照 https://wiki.radxa.com/Rock5/5b/getting_started 下载并烧录系统，这里先测试下 ubuntu(server 版本）（不建议一开始使用这个系统，bug多，先用debian或者 armbian（推荐） 或者 安卓， 安卓是最好上手的）。\n这里系统盘制作好了会发现磁盘最后面有一段空闲分区，不用手动去扩展，ubuntu 系统第一次启动会自动扩容根目录到卡的最大空间。\n可以使用串口模块查看日志，串口连接（波特率是 1500000 ，可能有些串口模块不支持这么高的波特率）\n但是日志是不完全的，因为默认系统都关闭了日志打印，也不能看到什么消息\nUbuntu 第一次开机 会一直循环\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 [ 9.952843] BUG: spinlock bad magic on CPU#1, systemd-udevd/433 [ 9.957383] lock: 0xffffffc012b26080, .magic: 00000000, .owner: \u0026lt;none\u0026gt;/-1, .owner_cpu: 0 [ 12.590411] reboot: Restarting system DDR Version V1.08 20220617 LPDDR4X, 2112MHz channel[0] BW=16 Col=10 Bk=8 CS0 Row=17 CS1 Row=17 CS=2 Die BW=8 Size=4096MB channel[1] BW=16 Col=10 Bk=8 CS0 Row=17 CS1 Row=17 CS=2 Die BW=8 Size=4096MB channel[2] BW=16 Col=10 Bk=8 CS0 Row=17 CS1 Row=17 CS=2 Die BW=8 Size=4096MB channel[3] BW=16 Col=10 Bk=8 CS0 Row=17 CS1 Row=17 CS=2 Die BW=8 Size=4096MB Manufacturer ID:0x6 CH0 RX Vref:28.7%, TX Vref:24.8%,25.8% CH1 RX Vref:28.7%, TX Vref:24.8%,23.8% CH2 RX Vref:27.7%, TX Vref:24.8%,23.8% CH3 RX Vref:29.7%, TX Vref:24.8%,24.8% change to F1: 528MHz change to F2: 1068MHz change to F3: 1560MHz change to F0: 2112MHz out INFO: Preloader serial: 2 NOTICE: BL31: v2.3():v2.3-405-gb52c2eadd:derrick.huang NOTICE: BL31: Built : 11:23:47, Aug 15 2022 INFO: spec: 0x1 INFO: ext 32k is not valid INFO: GICv3 without legacy support detected. INFO: ARM GICv3 driver initialized in EL3 INFO: system boots from cpu-hwid-0 INFO: idle_st=0x21fff, pd_st=0x11fff9, repair_st=0xfff70001 INFO: dfs DDR fsp_params[0].freq_mhz= 2112MHz INFO: dfs DDR fsp_params[1].freq_mhz= 528MHz INFO: dfs DDR fsp_params[2].freq_mhz= 1068MHz INFO: dfs DDR fsp_params[3].freq_mhz= 1560MHz INFO: BL31: Initialising Exception Handling Framework INFO: BL31: Initializing runtime services WARNING: No OPTEE provided by BL2 boot loader, Booting device without OPTEE initialization. SMC`s destined for OPTEE will return SMC_UNK ERROR: Error initializing runtime service opteed_fast INFO: BL31: Preparing for EL3 exit to normal world INFO: Entry point address = 0x200000 INFO: SPSR = 0x3c9 [ 10.314850] BUG: spinlock bad magic on CPU#5, systemd-udevd/394 [ 10.316119] lock: 0xffffffc012b05080, .magic: 00000000, .owner: \u0026lt;none\u0026gt;/-1, .owner_cpu: 0 用了诱骗器让充电器输出固定的12V,就能跑起来\n1 2 [ 10.305132] BUG: spinlock bad magic on CPU#7, systemd-udevd/379 [ 10.305139] lock: 0xffffffc012a25080, .magic: 00000000, .owner: \u0026lt;none\u0026gt;/-1, .owner_cpu: 0 HDMI 插上也没有反应，串口终端\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 [ 723.967060] rockchip-hdptx-phy-hdmi fed70000.hdmiphy: hdptx phy pll locked! [ 723.967381] rockchip-hdptx-phy-hdmi fed70000.hdmiphy: hdptx phy lane locked! [ 726.353844] Buffer I/O error on device mmcblk0p2, logical block 12289 [ 726.354406] Buffer I/O error on device mmcblk0p2, logical block 141311 [ 726.354819] Buffer I/O error on device mmcblk0p2, logical block 141312 [ 726.355469] Buffer I/O error on device mmcblk0p2, logical block 141318 [ 726.355885] Buffer I/O error on device mmcblk0p2, logical block 141319 [ 726.356330] Buffer I/O error on device mmcblk0p2, logical block 141323 [ 726.356738] Buffer I/O error on device mmcblk0p2, logical block 141324 [ 726.357180] Buffer I/O error on device mmcblk0p2, logical block 141326 [ 726.357586] Buffer I/O error on device mmcblk0p2, logical block 141327 [ 726.357992] Buffer I/O error on device mmcblk0p2, logical block 141328 [ 726.363448] Aborting journal on device mmcblk0p2-8. [ 726.363592] JBD2: Error -5 detected when updating journal superblock for mmcblk0p2-8. [ 726.364213] EXT4-fs (mmcblk0p2): I/O error while writing superblock [ 726.364331] EXT4-fs error (device mmcblk0p2): ext4_journal_check_start:83: Detected aborted journal [ 726.364484] EXT4-fs (mmcblk0p2): Remounting filesystem read-only [ 726.364594] EXT4-fs (mmcblk0p2): ext4_writepages: jbd2_start: 9223372036854775779 pages, ino 11320; err -30 [ 726.418700] JBD2: Error while async write back metadata bh 814. [ 726.428108] EXT4-fs error (device mmcblk0p2): __ext4_find_entry:1611: inode #4508: comm systemd-udevd: reading directory lblock 0 [ 726.428414] EXT4-fs (mmcblk0p2): I/O error while writing superblock [ 726.428590] EXT4-fs error (device mmcblk0p2): __ext4_find_entry:1611: inode #548: comm systemd-udevd: reading directory lblock 0 [ 726.428767] EXT4-fs (mmcblk0p2): I/O error while writing superblock [ 726.428883] EXT4-fs error (device mmcblk0p2): __ext4_find_entry:1611: inode #2119: comm systemd-udevd: reading directory lblock 0 [ 726.429062] EXT4-fs error (device mmcblk0p2): __ext4_find_entry:1611: inode #2: comm systemd-udevd: reading directory lblock 0 [ 726.429233] EXT4-fs error (device mmcblk0p2): __ext4_find_entry:1611: inode #4508: comm systemd-udevd: reading directory lblock 0 这读取文件系统错误，有可能TF卡松动了，裸板的设计，没有外壳的时候TF卡确实很容易松动， 断电插紧重启即可\n运行一会儿后又出现了问题。。。\n1 2 3 4 5 [ 1147.255838] rk806 spi2.0: SPI transfer timed out [ 1147.263313] spi_master spi2: failed to transfer one message from queue [ 1147.270938] cpu cpu0: rockchip_cpufreq_set_volt: failed to set voltage (925000 925000 950000 uV): -11 [ 1147.278907] cpufreq: __target_index: Failed to change cpu frequency: -110 [ 1147.489206] rk806 spi2.0: SPI transfer timed out rk806 貌似是电源管理 IC，看样子有可能是充电协议握手出现了啥问题，先不管，断电重启，之后再说。\n更换国内源，比如中科大 mirrors.ustc.edu.cn，编辑 /etc/apt/sources.list\n1 2 3 4 5 6 7 8 deb http://mirrors.ustc.edu.cn/ubuntu-ports/ focal main restricted universe multiverse #deb-src http://mirrors.ustc.edu.cn/ubuntu-ports/ focal main restricted universe multiverse deb http://mirrors.ustc.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse #deb-src http://mirrors.ustc.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse deb http://mirrors.ustc.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse #deb-src http://mirrors.ustc.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse deb http://mirrors.ustc.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse #deb-src http://mirrors.ustc.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse apt update发现报错, 又报错了\n按照通用做法\n1 sudo gpg --keyserver keyserver.ubuntu.com --recv-keys 9B98116C9AA302C7 报错 gpg: keyserver receive failed: No data，于是去apt.radxa.com源看看\n1 wget -O - apt.radxa.com/focal-stable/public.key | sudo apt-key add - 电源 PMU 是通过 I2C 连接到芯片的，可以在系统看到当前协商的电压：\n1 sensors tcpm_source_psy_4_0022-i2c-4-22 以及可以看到 typec 的相关信息\n1 grep \u0026#34;\u0026#34; /sys/class/typec/port0/* 2\u0026gt;/dev/null 实际电压可以(需要除以~172.5)\n1 2 awk \u0026#39;{printf (\u0026#34;%0.2f\\n\u0026#34;,$1/172.5); }\u0026#39; \u0026lt;/sys/devices/iio_sysfs_trigger/subsystem/devices/iio\\:device0/in_voltage6_raw 11.98 CPU 1 2 3 cat /proc/cpuinfo sudo apt-get install cpufrequtils sudo cpufreq-info 可以看到最大频率为 2.4GHz， 以及 4个小核 1.8GHz 用 7z 在没有风扇的情况下先跑个分看看情况，跑起来手摸cpu盖子还是很烫的\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 $ apt install p7zip $ 7zr b 7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21 p7zip Version 16.02 (locale=C.UTF-8,Utf16=on,HugeFiles=on,64 bits,8 CPUs LE) LE CPU Freq: 64000000 - - - - - - - - RAM size: 15722 MB, # CPU hardware threads: 8 RAM usage: 1765 MB, # Benchmark threads: 8 Compressing | Decompressing Dict Speed Usage R/U Rating | Speed Usage R/U Rating KiB/s % MIPS MIPS | KiB/s % MIPS MIPS 22: 13939 726 1867 13560 | 199330 682 2494 17002 23: 13416 748 1828 13670 | 193846 684 2452 16775 24: 12832 759 1818 13797 | 186688 681 2406 16385 25: 12244 758 1846 13980 | 179663 680 2350 15989 ---------------------------------- | ------------------------------ Avr: 748 1840 13752 | 682 2426 16538 Tot: 715 2133 15145 可以看到这里的 speed 和 rating 是树莓派4B 的至少 3 倍了\n尝试看看温度，用 ssh 登录试试，串口执行\n1 ifconfig 看到ip，然后ssh root@ip输入密码root，报错Permission denied, please try again.，在串口终端修改密码passwd root为root，还是不行，可能默认设置不允许 root 用户登录，修改vim /etc/ssh/sshd_config 添加PermitRootLogin yes 后 重启服务systemctl restart sshd即可\n1 watch -n 0.1 cat /sys/class/thermal/thermal_zone0/temp 同时跑分，温度最高跑到了72℃，还是很凉快的。 同时，看一下频率是否跑满了\n1 watch -n 0.1 cpufreq-info -f -c 4 这里 -c 指令核心 id， 可以看到跑分时频率为 2400000Hz 或者 1800000Hz\n到此为止，你以为真的跑到 2.4GHz 了吗，99.99%的可能并没有，只是显示 2.4GHz，最开始这个开发板甚至内置了一个测试软件来抽奖看自己买到的 CPU 处于什么水平。。。 RK在rk35系列使用了 PVTM (Process-Voltage-Temperature Monitor) （PVT）来监控系统状态，有一个 MCU 专门来控制频率CPU 频率，以及 NPU GPU\nLink: What is PVTM? Or why your Rockchip RK3588 CPU may not reach 2.4 GHz\nLink: cpufreq-rockchip.txt\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 rock@rock-5b:~$ dmesg |grep pvtm [ 8.110543] rockchip-pvtm fda40000.pvtm: pvtm@0 probed [ 8.110598] rockchip-pvtm fda50000.pvtm: pvtm@1 probed [ 8.110647] rockchip-pvtm fda60000.pvtm: pvtm@2 probed [ 8.110693] rockchip-pvtm fdaf0000.pvtm: pvtm@3 probed [ 8.110736] rockchip-pvtm fdb30000.pvtm: pvtm@4 probed [ 9.051869] cpu cpu0: pvtm=1456 [ 9.051948] cpu cpu0: pvtm-volt-sel=2 [ 9.060591] cpu cpu4: pvtm=1705 [ 9.064527] cpu cpu4: pvtm-volt-sel=4 [ 9.073916] cpu cpu6: pvtm=1724 [ 9.077872] cpu cpu6: pvtm-volt-sel=5 [ 9.162917] mali fb000000.gpu: pvtm=877 [ 9.162950] mali fb000000.gpu: pvtm-volt-sel=3 [ 9.346530] RKNPU fdab0000.npu: pvtm=880 [ 9.351791] RKNPU fdab0000.npu: pvtm-volt-sel=3 看不太懂，不知道每个数值对应了什么级别的频率\n上面的信息是由内核报告的 Operating Performance Point (OPP), 但是实际跑的频率通过 ThomasKaiser/SBC-Bench.sh 可以获得（内置的armbian-config命令中集成了此工具的，可以直接用），比如我的\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 Checking cpufreq OPP for cpu0-cpu3 (Cortex-A55): Cpufreq OPP: 1800 Measured: 1798 (1798.646/1798.490/1798.372) Cpufreq OPP: 1608 Measured: 1614 (1614.427/1614.033/1613.875) Cpufreq OPP: 1416 Measured: 1414 (1415.323/1414.869/1414.627) Cpufreq OPP: 1200 Measured: 1233 (1233.787/1233.729/1233.585) (+2.8%) Cpufreq OPP: 1008 Measured: 1007 (1007.980/1007.956/1007.524) Cpufreq OPP: 816 Measured: 806 (806.096/806.077/806.039) (-1.2%) Cpufreq OPP: 600 Measured: 589 (589.884/589.422/589.281) (-1.8%) Cpufreq OPP: 408 Measured: 391 (391.542/391.489/391.356) (-4.2%) Checking cpufreq OPP for cpu4-cpu5 (Cortex-A76): Cpufreq OPP: 2400 Measured: 2227 (2227.990/2227.846/2227.750) (-7.2%) Cpufreq OPP: 2208 Measured: 2161 (2162.236/2161.558/2161.286) (-2.1%) Cpufreq OPP: 2016 Measured: 1998 (1998.559/1998.559/1998.414) Cpufreq OPP: 1800 Measured: 1826 (1826.351/1826.351/1826.271) (+1.4%) Cpufreq OPP: 1608 Measured: 1623 (1623.824/1623.824/1623.744) Cpufreq OPP: 1416 Measured: 1442 (1442.152/1442.089/1441.869) (+1.8%) Cpufreq OPP: 1200 Measured: 1197 (1197.094/1197.094/1196.904) Cpufreq OPP: 1008 Measured: 1002 (1002.915/1002.132/1002.060) Cpufreq OPP: 816 Measured: 807 (808.040/806.980/806.826) (-1.1%) Cpufreq OPP: 600 Measured: 592 (592.867/592.828/592.802) (-1.3%) Cpufreq OPP: 408 Measured: 394 (394.914/394.905/394.842) (-3.4%) Checking cpufreq OPP for cpu6-cpu7 (Cortex-A76): Cpufreq OPP: 2400 Measured: 2243 (2244.059/2243.815/2243.718) (-6.5%) Cpufreq OPP: 2208 Measured: 2160 (2160.970/2160.925/2160.744) (-2.2%) Cpufreq OPP: 2016 Measured: 1990 (1990.232/1990.040/1990.040) (-1.3%) Cpufreq OPP: 1800 Measured: 1812 (1812.294/1812.174/1812.055) Cpufreq OPP: 1608 Measured: 1604 (1604.397/1604.319/1604.203) Cpufreq OPP: 1416 Measured: 1421 (1421.929/1421.837/1421.837) Cpufreq OPP: 1200 Measured: 1214 (1214.996/1214.968/1214.912) (+1.2%) Cpufreq OPP: 1008 Measured: 1019 (1019.959/1019.934/1019.910) (+1.1%) Cpufreq OPP: 816 Measured: 818 (818.552/818.433/818.394) Cpufreq OPP: 600 Measured: 592 (592.906/592.893/592.854) (-1.3%) Cpufreq OPP: 408 Measured: 394 (394.950/394.905/394.887) (-3.4%) 可以看到，实际只有2.2GHz，和2.4GHz足足差了200MHz, 6.5%，确实很糟糕了。。。\n内存 查看频率：\n1 2 cat /sys/class/devfreq/dmc/cur_freq cat /sys/kernel/debug/clk/clk_summary | grep ddr 官方说明： The ram for ROCK 5B is LPDDR 4x, two 32bits LPDDR 4x chips make 64bits, data frequency is up to 4224Mhz. ROCK 5B offers 4GB, 8GB and 16GB ram size options.\n可以看到实际频率 1068000000， 1GHz， 查看可用频率\n1 2 3 4 5 cat /sys/class/devfreq/dmc/available_frequencies 528000000 1068000000 1560000000 2112000000 # 设置 DDR 频率，例如，设置 1560MHz echo userspace \u0026gt; /sys/class/devfreq/dmc/governor echo 1560000000 \u0026gt; /sys/class/devfreq/dmc/userspace/set_freq HDMI输出 到此为止，HDMI 仍然没有输出，我的显示器是 2k(2560x1440)\n1 cat /sys/class/drm/card0-HDMI-A-1/modes 发现没有 2k 的分辨率\n换个 1080p 的显示器接上 HDMI，立马亮了，终端界面tty1出现了，没有桌面。\n另外，在使用 debian 系统后，可以直接输出 1080p和4k输出，但均没有 2k 输出可以直接使用， 不过有个最简单的方法就是设置为 4k60fps，然后设置缩放200%即可，因为性能足够， 4k 也不卡。\nArmbian Armbian 适配得更好一点，推荐使用 因为 GPU 驱动大多需要在 wayland 模式下使用，可以设置默认登录到 wayland 窗口管理模式，这样就不用每次登录时选择一次了\n1 sudo vim /etc/gdm3/custom.conf 修改WaylandEnable=true\n另外，官网提供的链接不是最新的，可以到github.com/armbian/build/releases 找最新的。 另外， github.com/amazingfate/armbian-rock5b-images 据说是内置了 GPU 相关的驱动，在官方还没完全支持 GPU 前可以尝试这个，具体看后面 GPU 使用部分。\n从NVME启动 SD 卡会比较慢，据说太慢还会影响到快充握手，因为快充握手协议是在系统驱动里面的，所以最好用 eMMc 或者 nvme ssd 或者 USB 启动读写更快。\n启动流程: 内部有个叫 maskrom 的固件，会优先启动 SPI nor Flash -\u0026gt; sd -\u0026gt; eMMC\n默认不支持从 nvme 启动，所以需要额外的引导，将引导保存到 SPI nor Flash中，然后这个固件再引导nvme的系统启动。\n于是需要先更新 Nor Flash 的固件，使用 rk 官方的 rkdevtool，注意不能直接就给 nor flash 下载固件，还需要先给 maskrom 传一个用来和 rkdevtool 通讯以及写 flash 等操作的固件，这里名字叫 rk*_spl_loader.bin，这个固件只会临时运行在内存中。\n装 USB 驱动，然后打开 rkdevtool， 按住 maskroom 按钮，上电，软件会检测到设备。 Write by address 默认没勾上，注意勾上\n然后下载系统，可以用官方的 debian 或者 armbian\narmbian 页面有些提示比如带硬件加速的 kodi 使用\nPD is broken on most revisions that are in the wild and is causing boot loop. Workaround is to use stupid / fixed at 5 volts USB-C power supply. NVME boot can work with eMMC/SD boot or SPI. Check those instructions to install / update SPI boot loader. In order to enable 3D acceleration:\n1 2 3 4 5 6 7 sudo add-apt-repository ppa:liujianfeng1994/panfork-mesa sudo add-apt-repository ppa:liujianfeng1994/rockchip-multimedia sudo apt update sudo apt dist-upgrade sudo apt install kodi 没买 m.2 转 USB转接器，所以直接把 nvme ssd 装到板子上，然后用 SD 卡进 debian 系统\n1 2 3 4 5 6 7 rock@rock-5b:~$ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT mtdblock0 31:0 0 16M 0 disk mmcblk1 179:0 0 29.2G 0 disk ├─mmcblk1p1 179:1 0 512M 0 part /boot └─mmcblk1p2 179:2 0 28.6G 0 part / nvme0n1 259:0 0 931.5G 0 disk 可以看到 直接能读到 nvme0n1，直接操作这个固态即可，因为是初次测试，硬盘也是空的，直接\n1 sudo xzcat Armbian_22.11.2_Rock-5b_jammy_legacy_5.10.110_gnome_desktop.img.xz | sudo dd of=/dev/nvme0n1 bs=1M status=progress 写入完成后\n1 2 3 nvme0n1 259:0 0 931.5G 0 disk ├─nvme0n1p1 259:1 0 256M 0 part └─nvme0n1p2 259:2 0 6.8G 0 part 然后断电，拔掉 SD 卡上电即可从 nvme ssd 中的系统启动\n进系统后看看接口情况\n1 sudo dmidecode | grep --color \u0026#34;PCI\u0026#34; speed test: iozone, fio\n1 2 3 4 5 6 7 8 iozone -e -I -a -s 100M -r 4k -r 16k -r 512k -r 1024k -r 16384k -i 0 -i 1 -i 2 random random bkwd record stride kB reclen write rewrite read reread read write read rewrite read fwrite frewrite fread freread 102400 4 131760 167822 191255 204110 49352 108890 102400 16 400881 478178 340041 289103 164730 277126 102400 512 1444041 1676845 1619100 1573208 1314692 1723524 102400 1024 1797630 1854966 1684764 1714470 1559952 1803609 102400 16384 2478047 2356570 2140251 2189357 2261106 2410056 可以看到 我的 SSD 是三星的 970 evo plus, 是支持 nvme3x4 的，1M 读写 分别是 1.68GB/s 1.79GB/s\n虽然都是 PCIE3.0x4 接口，可以看到顺序读写都没有达到在电脑上 3.5GB/s 和 3.3GB/s 的水平，在板子上只能有 2.1GB/s 和 2.5GB/s，读写速度甚至没有写入速度高，随机 4k 读写也只能到 50MB/s 和 108MB/s，远远低于上面测评中的 \u0026gt;= 800MB/s，可见，开发板（armbian22）远远没有跑满 PCIE3.0x4 的速度，暂时不知是硬件还是软件的问题，以后发现了补上\n另外，需要考虑散热问题，固态的发热量挺大的！可以通过/dev/nvme0n1看到固态温度\n1 2 sudo apt install nvme-cli sudo nvme smart-log /dev/nvme0 |grep -i \u0026#34;^Temperature\u0026#34; GPU 硬件解码 装好 armbian 发现自带的 mpv 播放器只能软解，跑个 4k 直接把 CPU 吃得差不多一卡一卡。\n按照 armbian 下载页面的源装了 kodi，不能直接用只能放声音没有画面，是因为无法解码导致的。\n参考这个帖子的步骤即可（可以直接重装系统，amazingfate 打包了带这些软件包的系统，也可以自己手动更新包，自己更新会麻烦一点）：https://forum.radxa.com/t/rk3588-kodi-rkmpp-accelerated-decoding-working-out-of-box/12785/2 和 https://forum.armbian.com/topic/24802-kodi-for-rk35xx-510-legacy-kernel/\n以及 GPU 相关也可以参考玩 我的世界 的帖子： https://forum.radxa.com/t/guide-run-minecraft-at-full-speed-on-rock-5b/11937/8\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 You have to create the following udev rules to enable mpp and rga hardware acceleration: KERNEL==\u0026#34;mpp_service\u0026#34;, MODE=\u0026#34;0660\u0026#34;, GROUP=\u0026#34;video\u0026#34; KERNEL==\u0026#34;rga\u0026#34;, MODE=\u0026#34;0660\u0026#34;, GROUP=\u0026#34;video\u0026#34; KERNEL==\u0026#34;system-dma32\u0026#34;, MODE=\u0026#34;0666\u0026#34;, GROUP=\u0026#34;video\u0026#34; KERNEL==\u0026#34;system-uncached-dma32\u0026#34;, MODE=\u0026#34;0666\u0026#34;, GROUP=\u0026#34;video\u0026#34; RUN+=\u0026#34;/usr/bin/chmod a+rw /dev/dma_heap\u0026#34; to /etc/udev/rules.d/11-rockchip-multimedia.rules To enable libv4l-rkmpp for chromium, you have to install libv4l-rkmpp, v4l-utils and chromium-browser in this ppa: sudo apt install chromium-browser=$(apt-cache show chromium-browser|grep Version|grep rkmpp|cut -d \u0026#34; \u0026#34; -f2) chromium-codecs-ffmpeg-extra=$(apt-cache show chromium-browser|grep Version|grep rkmpp|cut -d \u0026#34; \u0026#34; -f2) libv4l-rkmpp, v4l-utils Then run the following commands: sudo ln -s /lib /usr/lib64 cd /usr/lib64/ \u0026amp;\u0026amp; sudo ln -s aarch64-linux-gnu/libv4l2.so.0.0.0 libv4l2.so And add the following lines to /etc/rc.local: echo dec \u0026gt; /dev/video-dec0 chown root:video /dev/video-dec0 chmod 0660 /dev/video-dec0 echo enc \u0026gt; /dev/video-enc0 chown root:video /dev/video-enc0 chmod 0660 /dev/video-enc0 Add chrome flags \u0026#34;--use-gl=egl\u0026#34; to /etc/chromium-browser/default: CHROMIUM_FLAGS=\u0026#34;--use-gl=egl\u0026#34; ================================================== chromium related FYI: https://github.com/JeffyCN/libv4l-rkmpp 1 2 3 4 sudo add-apt-repository ppa:liujianfeng1994/panfork-mesa sudo apt update wget https://github.com/JeffyCN/rockchip_mirrors/raw/libmali/firmware/g610/mali_csffw.bin sudo mv mali_csffw.bin /lib/firmware ","date":"2023-03-14T15:45:24+08:00","image":"https://sharelter.github.io/p/rock5b/rock5b_hu3436fbf640afd80aff29571cebe681b5_324530_120x120_fill_q75_box_smart1.jpg","permalink":"https://sharelter.github.io/p/rock5b/","title":"Rock5b试玩"},{"content":"缘起 最近主力laptop上面的Arch根目录余量一直在1.5GiB上下徘徊， 今天滚完之后/仅剩的900+MB 已经不能完成Arch的每日一滚了\n因为我在安装这个Arch的时候使用了固定的分区方式， 而且根目录只分配了20GB, 安装使用桌面作业系统的话， 很轻松就可以吃光这点空间\n之前的分区方式大概如下表\n1 2 3 4 5 /dev/nvme0n1--- | --- partation1 - /root(ext4, 20G) | --- partation2 - /home(f2fs, 460G) 不幸的是我在使用的磁盘里面没有留下空余的未分配空间给根目录分区扩充， 比较好的方法是重装整个OS\n如果不干预的话， 我的开发环境会在不远的将来boom掉\n那么事不宜迟， 开工！\n在求教c10s之后，她扔出了如下表情 嗯。。被强烈安利了btrfs\n之前也有听过btrfs这个东东，但是因为懒还没有用过\n在Archwiki找到btrfs的wikipage 发现自带很多高级的功能 例如逻辑卷管理、快照、RAID \u0026hellip;etc.\nBtrfs is a modern copy on write (CoW) filesystem for Linux aimed at implementing advanced features while also focusing on fault tolerance, repair and easy administration. Jointly developed at multiple companies, Btrfs is licensed under the GPL and open for contribution from anyone.\n看起来很好耶，上车！\nTips: btrfs的开发十分活跃， 建议使用最新的内核，尽量避免使用祖传的老版本内核以得到最佳的体验\n创建文件系统 先在磁盘上面创建一个btrfs的文件系统 sudo mkfs.btrfs -L mylabel /dev/nvme0n1p2\nbtrfs也可以以霸占整个磁盘的方式进行使用， 此时这个磁盘的分区表就由btrfs接管了\n因为我还需要ESP partation来使用UEFI启动， 就不可以使用这种方式\n这里我的磁盘是分好了区的， 一个2GB的FAT32分区来实现UEFI启动 剩下的所有空间给btrfs\n操作到这一步， 已经可以继续下一步往这些文件系统上面安装系统了\n但是， 这样使用btrfs不能用上它的许多高级功能 此时如果直接挂载这个分区的话， 可以享受到btrfs的CoW(写时复制) 特性来减少闪存设备的损耗，可以启用压缩、、类似的优势\n继续操作， 需要使用用户空间的btrfs工具btrfs-progs 在ArchLinux上面要安装它，只需 sudo pacman -S btrfs-progs\nbtrfs子卷 创建好btrfs文件系统之后， 就拥有了一个ID=5的顶级子卷\n创建一个空闲的目录(例如/btrfs) 把文件系统的顶级子卷挂上， 就可以用 btrfs subvolume create /path/to/subvolume来创建子卷\n这里， 我为/root, /home, /swap这三个目录在顶级子卷下面创建了三个子卷\n1 2 btrfs subvoleme create /btrfs/subvol_root btrfs subvolume create /btrfs/subvol_home Archwiki推荐为swap文件单独创建一个子卷直属于顶级子卷的子卷来挂载: btrfs subvolume create /btrfs/@swap\nbtrfs-progs 6.1版本之后，提供了一个直接创建swap文件的命令: btrfs filesystem mkswapfile --size 8g /btrfs/@swap/swapfile\n可以通过--size来定义创建的缓存文件的大小，这样创建出来的swap文件就可以直接挂载了～\n通过btrfs subvolume list -p /mnt 可以列出文件系统下面的子卷\n1 2 3 4 5 ID 256 gen 10069 parent 5 top level 5 path subvol_root ID 257 gen 10069 parent 5 top level 5 path subvol_home ID 258 gen 9195 parent 5 top level 5 path @swap ID 259 gen 17 parent 256 top level 256 path subvol_root/var/lib/portables ID 260 gen 18 parent 256 top level 256 path subvol_root/var/lib/machines 上面是我的子卷列表\n挂载 在挂载的时候加上subvol=/path/to/subvolume或者subvolid=?，btrfs子卷就可以像文件系统分区一样被挂载\n推荐创建一个子卷来挂载根目录，这样会为以后更改子卷布局和快照带来非常大的便利\n我添加了 compress=zstd启用zstd压缩方式，discard=async启用SSD-TRIM 参数 Update: 去掉了autodefrag,在SSD上面使用这个选项弊大于利\n因为是在安装过程中操作， 挂载的选项都会被genfstab自动插到/etc/fstab当中\n我的/etc/fstab如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 # /dev/nvme0n1p2 LABEL=Arch UUID=efeb8313-4210-4499-a805-d0f97e57c549 / btrfs rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,autodefrag,subvolid=256,subvol=/subvol_root 0 0 # /dev/nvme0n1p1 UUID=45BB-F7D1 /boot vfat rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro 0 2 # /dev/nvme0n1p2 LABEL=Arch UUID=efeb8313-4210-4499-a805-d0f97e57c549 /home btrfs rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,autodefrag,subvolid=257,subvol=/subvol_home 0 0 # /dev/nvme0n1p2 LABEL=Arch UUID=efeb8313-4210-4499-a805-d0f97e57c549 /swap btrfs rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,autodefrag,subvolid=258,subvol=/@swap 0 0 /swap/swapfile none swap defaults 0 0 检查文件系统错误 没有效验的文件系统，文件损坏是无声发生的\nbtrfs提供了scrub来进行在线的文件系统检查\nBtrfsWiki这样写道：\nBtrfs scrub is \u0026ldquo;[a]n online filesystem checking tool. Reads all the data and metadata on the filesystem and uses checksums and the duplicate copies from RAID storage to identify and repair any corrupt data.\u0026rdquo;\n挂上文件系统的根目录进行一次扫描操作: sudo btrfs scrub start /\n查看进度: sudo btrfs scrub status /\n1 2 3 4 5 6 7 8 9 10 UUID: efeb8313-4210-4499-a805-d0f97e57c549 Scrub started: Sun Mar 12 19:53:53 2023 Status: running Duration: 0:00:05 Time left: 0:00:14 ETA: Sun Mar 12 19:54:16 2023 Total to scrub: 93.21GiB Bytes scrubbed: 24.29GiB (26.06%) Rate: 4.86GiB/s Error summary: no errors found 扫描只用了14秒， 非常快！\nEnd 我也是刚刚上手btrfs, 如果有小可爱有更好的建议或者发现哪里出错了，欢迎评论 or 提出PR~\n","date":"2023-03-12T09:21:48Z","image":"https://sharelter.github.io/p/archlinux-btrfs/btrfs-logo_hue9c8b9eb9118c76262cc59b97064391e_29151_120x120_fill_q75_box_smart1.jpg","permalink":"https://sharelter.github.io/p/archlinux-btrfs/","title":"让ArchLinux运行在Btrfs上！"},{"content":"因为我手边只有一台在laptop上面拆下来的DVD Writer, 而且这货所使用的接口并不是标准的SATA接口， 而是一种缩短了电源部分，只留下5V的东西。\n苦于缺少各种条件， 刻录MacOS9 光盘的操作等了好多天才得以完成\n我不会说我跑去借了一台x86计算机来做\n这个iso文件直接写进USB存储器里面是没有办法正常进行安装的\n去Google了一下， 似乎是MacOS9会检测安装介质是否可写\n如果发现可写，就会立即终止启动进程\n启动的时候按住Option键， 在CD光盘上面启动，如果顺利的话， 大概会是下图这个样子 经过一番加载和SuperDrive的轰鸣声(这东西真的好吵)之后，顺利进入到了MacOS9的LiveCD System 系统里面出现的文字几乎都是简体中文字符(zh-cn), 不过编码方式和现在流行的不一样？\n直接执行MacOS安装就可以开始把MacOS9 安装进磁盘里面 一路选择下一步，就可以开始安装作业系统啦 大约十分钟后， 会提示作业系统安装好了， 可以进行重新启动了\n这里进入的还是MacOS X 10.4， 选中刚刚装好的MacOS9分区之后,\n是可以成功开起Classic环境的 不过。。。这个怎么看起来像是在MacOS X 里面又运行了一个MacOS 9 的虚拟机呀。\n","date":"2022-12-29T19:38:57+08:00","image":"https://sharelter.github.io/p/%E5%AE%89%E8%A3%85macos9.2.2%E4%B8%AD%E6%96%87%E7%89%88/check_hu8c2f981c015ea3229faa34cd44b665d2_5645822_120x120_fill_q75_box_smart1.jpg","permalink":"https://sharelter.github.io/p/%E5%AE%89%E8%A3%85macos9.2.2%E4%B8%AD%E6%96%87%E7%89%88/","title":"安装MacOS9.2.2中文版"},{"content":"受到Apple M1的持久续航的启发， 想到会不会Arm的laptop的续航会比较可观\n开始着手搜寻各种arm构架的laptop\n可选项有如下几个:\n之前听闻华为擎云L410,但是过于灵车,而且价格超出预算\\ 马上要来的Thinkpad x13s看上去非常诱人, 但是售价也是非常的感人\\ 开源社区的Pinebook Pro看起来很合适, 无奈大陆购买比较困难\\ 各种型号的Chromebook, 价格低廉, 做工精美, 就是它了 在逛某鱼的时候发现有ASUS C100P这样一台RK3288的本本, 去查了一下发现它出现在了ArchLinuxArm的硬件支持列表上面 顺着这个路线, 我又找到了它的继任型号C101P, 使用RK3399，在今天还可堪一用\n最终使用480CNY购入了一台橙色很新的C101P\n到手之后，键盘里面几乎没有灰尘, 屏幕和外壳上面没有划痕，nice\n但是10.1寸的屏幕拿来日常用比较费力，而且分辨率只有1280x720(后面出掉也主要是这个原因)\nChromeOS的原生应用运行十分流畅，不过这些功能都是使用Chrome的web端\n720p的视频解码它还可以对付，但是1080P以上的卡顿的几乎完全不能忍\nChromeOS提供的LInux环境是使用容器实现的,所以性能十分垃圾，只是使用命令行打开ranger文件管理器就要等待30seconds\n这样的性能显然不是RK3399应有的水平, 开始动了换掉ChromeOS的想法\n找到ArchLinuxArm的文档, 发现可以通过启动外置系统的方式来把Arch装进sdcard里面\n成功装进去之后大概是酱紫的: 能看到我给KDE装了一个漂亮的主题，同时还开了一点东西，\n这些能在这一台10.1寸的小本本上面完成在我看来是非常awesome的\n它的续航果然还不错，虽然电池只有30+Wh, 但是它的峰值功耗也只有6Watt, 轻度使用大概能有6hr的续航\n键盘的体验很熟悉，很像是我接触到的第一台laptop(它也是ASUS) 这样的键程对于10.1寸的laptop来说已经算是很棒了\nRK3399可以使用主线内核，这个本本的硬件信息如下图\n下面就到了折腾时间\n这台Chromebook C101P 的网卡是诡异的Marvell,需要额外的firmware才能工作\narchlinuxarm的包维护状况似乎不太好，fcitx5-rime的整套东西都是炸的\n睡眠则是会直接睡死,如果在使用的过程当中不幸按到sleep， 那么只有强制shutdown才能让它再次醒过来\n声音没有办法工作似乎是Chromebook的通病？我的这台也不例外，虽然按wiki调教过之后，扬声器可以勉强工作 但是我更常用的3.5mm接口却完全不能使用\n虽然这颗Soc上面带的Mali T860MP4有Panfrost可以用，可以满足像KDE/Gnome这样的比较复杂的桌面环境的流畅使用\n但还是比较buggy\n在小伙伴的鼓动下，我尝试了在这台机器上面启动Minecraft,尝试直接使用HMCL来下载游戏, 果然会报错\n到了这个时候，我已经折腾的筋疲力尽, 不想继续再折腾的路上走的更远了\n可惜的是, 我没有测试过使用它进行做一些开发环境的工作就把它又出掉了，不过在这样小的屏幕上面develop的体验不会很好吧\n","date":"2022-12-20T09:17:13Z","image":"https://sharelter.github.io/p/asus-chromebook/overview_hu0625a79d9e7cdc506fe21654cede939b_133150_120x120_fill_q75_box_smart1.jpg","permalink":"https://sharelter.github.io/p/asus-chromebook/","title":"折腾ArchLinux on Chromebook"},{"content":"一直想拥有一台ppc构架的计算机，但是一直没有真的买下来过\n虽然中间曾多次漫步海鲜市场，但也只是浏览\nn天前我结识了一只收藏古董硬件的小可爱，经过一番友好的交流，得知他有一台橙色尚可的Powerbook, 遂立刻买入\n这台PowerbookG4拥有667Mhz的IBM PowerPC构架中央处理器，ATI Mobility显示卡，512MB DDR，80GB HDD，另外还配备了Airport Card\n(在当时WLAN还是没有推广开的先进技术，属于选配部件\n如果把它和发布时间只相差一年的PowerbookG3放在一起，难以相信这是同一个时代的产品\n令我惊讶的是2001年出厂的它，历经21年的岁月洗礼，它所配备的锂电池居然还能有2hr的续航时间，没有死掉。\n屏幕上面只有一条划痕， 钛合金的外壳也只有浅浅的几道痕迹\n它的上一任主人一定也是比较爱惜它吧。。。\n它的脸大概是酱紫的 我第一眼注意到的是它的边框\n即使是以现在的标准来评判，这样的边框也能称得上窄(后面的铝合金G4还要更窄一些)\n这在当时的笔记型计算机市场一定能惊艳到很多人\n半透明的键盘非常有感觉，看起来很漂亮。键程是那个年代的笔记本的标准长度，敲起来有些老ThinkPad的感觉\n按键上面的刻字是倾斜的，是水果的独特味道？\n屏幕的转轴是某种塑料材质。。而且是使用螺钉固定在背部的，长时间使用之后很容易发生断裂。。\n上一任主人也特别提醒我打开盖子的时候动作要轻轻的\n我觉得Powerbook G4的可维护性做的很好， 如果你想要清理灰尘或者添加记忆体的话，在键盘正面就能直接完成 只需要把键盘最上面的旋钮转180度，再扣住键盘两边的卡扣就可以把键盘拿下来。\n值得一提的是键盘背面有磁铁用来让键盘平铺在金属框架上面的时候保持平整\n拧下背面的所有六角螺丝就可以取下底壳 那个时候的PCB还不是全黑(好像黑色会增加科技感？)\n散热风扇也不是现代笔记型计算机上常用的涡轮风扇,而使用了轴流风扇\n这台PowerBook支援的作业系统版本是MacOS9.2到10.4,跨越了整个从ppc到x86的迁移过程\n这次时间仓促，就先拿MacOS9.2.2试试水，等后面有时间折腾光盘了再回来玩。 ","date":"2022-12-16T09:17:13Z","image":"https://sharelter.github.io/p/powerbook-first-look/macos9_hubb44d30ee2c6fa4b1299a7708a69291d_757274_120x120_fill_q75_box_smart1.jpg","permalink":"https://sharelter.github.io/p/powerbook-first-look/","title":"Powerbook G4 Titanium上手体验"},{"content":"虽然之前很长很长一段时间里都在想着某天一定要好好打理一下自己的blog, 但是一直鸽🕊️到了现在(还不是因为懒) 回想一下还是蛮恐怖的一件事情呀，我居然拖了那么那么久。。 如果立刻就开始的话，到现在理论上会有两位数的文章了吧\n终于在昨天迈出了自己的第一步呢 在hugo的一堆主题里面选了很久， 选中了这个看起来比较modern的主题。 它提供了模版，可以直接使用这个模版创建自己的库， 而且它的自动部署还可以每天自动更新主题 主题的开发者帮我我做了非常多的事情。。。\n文档 写的比较全 按着README第一次用了codespaces, 虽然重建了几次才成功开起来一个能用的codespace 但是真的进入到这个web的VSC里面，专注地写作的时候体验还算不错？\n能够全身心地投入其中的状态本身就能够激起我的快乐。。。 (也许是因为我比较难长时间专注于某件事情？)\n在写的时候有些地方我会反复斟酌好久。。 感觉这样子浪费掉了一些时间， 而且会打断连续冒出来的文字。。 会不会先把🧠里面冒出来的文字全部倒在屏幕上面再调整是更好的选择呢？\n也许。。是强迫症使然？\n但是全身贯注的感觉真的好棒啊~\n","date":"2022-12-16T07:17:13Z","image":"https://sharelter.github.io/p/thought-about-blog/cover_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://sharelter.github.io/p/thought-about-blog/","title":"第?次写blog。。。"},{"content":"你好， 这里是ShioriMina的小窝。\n初次发言， 请多关照～\nemmmm\u0026hellip; 第一次在nvim里面用键盘写✍🏻️diary有点害羞呢\n但是希望这开了一个好头吧。。\n想要马上就开始创作的说。。\n后面会有许许多多不同方向的page被贴上来吧\n总之，Happy New Life!\n","date":"2022-12-15T09:17:13Z","image":"https://sharelter.github.io/p/happy-new-life/cover_hub1edd993859d0bc9dbec31a6aeecc559_2874860_120x120_fill_box_smart1_3.png","permalink":"https://sharelter.github.io/p/happy-new-life/","title":"Happy New Life"}]